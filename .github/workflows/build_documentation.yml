name: Continous documentation (build stable docs on tag/release and latest docs on each push)

on:
   push:
     branches:
       - master  
     tags:
       - 'v*'
         
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name:  check whether push is a commit push or tag push and creating a release is still needed 
      run: |
        REF=${{ github.ref }}
        if [[ $REF == *"tags"* ]]; then
          TAG_NAME=${REF##*/}
          echo "pushing a tag: $TAG_NAME"
          echo "::set-env name=TAG_NAME::$TAG_NAME"
          echo "::set-env name=DOC_SUBDIR::stable"
          echo "::set-env name=DO_RELEASE::yes"
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${TAG_NAME}"
          StatusCode=$(curl -o -I -L -s -w "%{http_code}" -X GET -G $URL)
          echo $StatusCode
          if [[ "$StatusCode" == 200 ]]; then
             echo "This is tagged release: there exists as github release for this tag."
             echo "::set-env name=CREATE_RELEASE::no"
          else
             echo "This is a tag for which no github release exist."
             echo "::set-env name=CREATE_RELEASE::yes"
          fi
        else
          BRANCH_NAME=${REF##*/}
          echo "pushing a commit in branch: $BRANCH_NAME"
          echo "::set-env name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-env name=DOC_SUBDIR::latest"
          echo "::set-env name=DO_A_RELEASE::no"
        fi
    - name:  checkout source branch 
      uses: actions/checkout@v1   
      with:
        ref: master
    - name: build documentation website in build/html/
      uses: ammaraskar/sphinx-action@master
      with:
        pre-build-command: "pip install sphinx-rtd-theme"
        docs-folder: "."
    - name: build documentation pdf in build/latex/
      uses: ammaraskar/sphinx-action@master
      with:
        pre-build-command: "pip install sphinx-rtd-theme && apt-get update -y && apt-get install -y latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended"
        build-command: "make latexpdf"
        docs-folder: "."    
    - name: Add and commit build documentation to gh-pages branch          
      run: |
        # clone gh-pages branch into 
        git clone "https://github.com/$GITHUB_REPOSITORY.git" --branch gh-pages --single-branch gh-pages
        rsync -av --delete  build/html/ gh-pages/$DOC_SUBDIR/   
        cp build/latex/*.pdf gh-pages/$DOC_SUBDIR/                   
        cd gh-pages
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update documentation" -a || true
        # The above command will fail if no changes were present, so we ignore that.
    - name: Push changes in gh-pages directory to gh-pages branch
      uses: ad-m/github-push-action@master
      with:
        branch: gh-pages
        directory: gh-pages
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      if: env.CREATE_RELEASE == 'yes'
      id: create_release
      # https://github.com/actions/create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ''
        draft: false
        prerelease: false    
    - name: Create Release Assets
      if: env.DO_RELEASE == 'yes'
      run: |  
        cd build/html/; zip -r ../../doc.htmldir.zip .; cd - 
        cp build/latex/*.pdf doc.pdf
    - name: Get Release
      if: env.DO_RELEASE == 'yes'
      id: get_release_info
      uses: bruceadams/get-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload release asset as pdf 
      if: env.DO_RELEASE == 'yes'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./doc.pdf
        asset_name: doc-${{ env.TAG_NAME }}.pdf
        asset_content_type: binary/octet-stream  
    - name: Upload release asset as zipped html (htz)
      if: env.DO_RELEASE == 'yes'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./doc.htmldir.zip
        asset_name: doc-${{ env.TAG_NAME }}.htmldir.zip
        asset_content_type: application/zip         
