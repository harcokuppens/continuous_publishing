name: Continous documentation (build stable docs on tag/release and latest docs on each push)

on:
   push:
     branches:
       - master  
     tags:
       - 'v*'

env:
   DOCUMENT_NAME: TorXakis-TOOLVERSION_Userguide-DOCVERSION 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name:  checkout source branch 
      uses: actions/checkout@v2   
      with:
        ref: master
    - name:  check whether pushing commit or tag, check creating a release is still needed and set DOCUMENT_NAME
      run: |
        REF=${{ github.ref }}
        TOOLVERSION=$(cat source/TOOLVERSION.txt 2>/dev/null) || TOOLVERSION=unknown
        DOCUMENT_NAME=${DOCUMENT_NAME/TOOLVERSION/$TOOLVERSION}
        if [[ $REF == *"tags"* ]]; then
          TAG_NAME=${REF##*/}
          echo "pushing a tag: $TAG_NAME"
          DOCUMENT_NAME=${DOCUMENT_NAME/DOCVERSION/$TAG_NAME}
          DO_RELEASE="yes"
          DOC_SUBDIR="stable"
          echo "::set-env name=DOCUMENT_NAME::$DOCUMENT_NAME"          
          echo "::set-env name=TAG_NAME::$TAG_NAME"
          echo "::set-env name=DOC_SUBDIR::$DOC_SUBDIR"
          echo "::set-env name=DO_RELEASE::$DO_RELEASE"
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${TAG_NAME}"
          StatusCode=$(curl -o -I -L -s -w "%{http_code}" -X GET -G $URL)
          echo $StatusCode
          if [[ "$StatusCode" == 200 ]]; then
             echo "This is tagged release: there exists as github release for this tag."
             CREATE_RELEASE="no"
          else
             echo "This is a tag for which no github release exist."
             CREATE_RELEASE="yes"
          fi
          echo CREATE_RELEASE=$CREATE_RELEASE
          echo "::set-env name=CREATE_RELEASE::$CREATE_RELEASE"
        else
          BRANCH_NAME=${REF##*/}
          echo "pushing a commit in branch: $BRANCH_NAME"
          SHA1=${{ github.sha }}
          SHA1_SHORT=${SHA1:0:7}
          DOCUMENT_NAME=${DOCUMENT_NAME/DOCVERSION/$SHA1_SHORT}
          DO_RELEASE="no"
          DOC_SUBDIR="latest"
          echo run_id=${{ github.run_id }}
          echo run_number=${{ github.run_number }}
          echo "::set-env name=DOCUMENT_NAME::$DOCUMENT_NAME"
          echo "::set-env name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-env name=DOC_SUBDIR::$DOC_SUBDIR"
          echo "::set-env name=DO_RELEASE::$DO_RELEASE"
        fi
        echo DO_RELEASE=$DO_RELEASE
        echo DOCUMENT_NAME=$DOCUMENT_NAME
        echo DOC_SUBDIR=$DOC_SUBDIR
        echo "::set-env name=DOCUMENT_URL_PDF::unknown"
    - name: build documentation website in pdf in build/latex/
      uses: ammaraskar/sphinx-action@0.4
      with:
        pre-build-command: "apt-get update -y && apt-get install -y graphviz git latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended"
        build-command: "make latexpdf"
        docs-folder: "."    
    - name: rename build pdf and upload store pdf url to env. variable and store upload url in env.var. DOCUMENT_URL_PDF 
      if: env.DO_RELEASE == 'no'
      run: |
        echo DOCUMENT_NAME-$DOCUMENT_NAME  
        buildpdf=${{ env.DOCUMENT_NAME }}.pdf            
        cp $DOCUMENT_PDF $buildpdf
        json=$(curl -F "file=@$buildpdf" https://file.io/?expires=1w)
        jsonparsed=https:${json##*https:}
        DOCUMENT_URL_PDF=${jsonparsed%%\"*}
        echo "::set-env name=DOCUMENT_URL_PDF::$DOCUMENT_URL_PDF"
        echo "DOCUMENT_URL_PDF=$DOCUMENT_URL_PDF"
    - name: build documentation website in build/html/ 
      uses: ammaraskar/sphinx-action@0.4
      with:
        pre-build-command: "apt-get update -y && apt-get install -y graphviz git"
        build-command: "make html"
        docs-folder: "."    
    - name: Add and commit build documentation to gh-pages branch          
      run: |
        # clone gh-pages branch into 
        git clone "https://github.com/$GITHUB_REPOSITORY.git" --branch gh-pages --single-branch gh-pages
        rsync -av --delete  build/html/ gh-pages/$DOC_SUBDIR/   
        cd gh-pages
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update documentation" -a || true
        # The above command will fail if no changes were present, so we ignore that.
    - name: Push changes in gh-pages directory to gh-pages branch
      uses: ad-m/github-push-action@master
      with:
        branch: gh-pages
        directory: gh-pages
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      if: env.CREATE_RELEASE == 'yes'
      id: create_release
      # https://github.com/actions/create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ''
        draft: false
        prerelease: false    
    - name: Create Release Assets
      if: env.DO_RELEASE == 'yes'
      run: |  
        cd build/html/; zip -r ../../website.zip .; cd - 
        cp $DOCUMENT_PDF doc.pdf
    - name: Get Release
      if: env.DO_RELEASE == 'yes'
      id: get_release_info
      uses: bruceadams/get-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload release asset as pdf 
      if: env.DO_RELEASE == 'yes'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./doc.pdf
        asset_name: ${{ env.DOCUMENT_NAME }}.pdf
        asset_content_type: binary/octet-stream  
    - name: Upload release asset as zipped html website (.website.zip)
      if: env.DO_RELEASE == 'yes'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./website.zip
        asset_name: ${{ env.DOCUMENT_NAME }}.website.zip
        asset_content_type: application/zip         
